{"version":3,"sources":["weather_app/weathercard.js","weather_app/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.834e36c4.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\n\r\n// passing tempInfo as a prop\r\nconst Weathercard = ({tempInfo}) => {\r\n\r\n  const[weatherState, setWeatherState] = React.useState(\"\");\r\n\r\n  const {\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  } = tempInfo;\r\n\r\n  useEffect(() => {\r\n    if(weathermood){\r\n      switch(weathermood){\r\n        case \"Clouds\": \r\n          setWeatherState(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\": \r\n          setWeatherState(\"wi-fog\");\r\n          break;\r\n        case \"Clear\": \r\n          setWeatherState(\"wi-day-sunny\");\r\n          break;\r\n        case \"Rain\": \r\n          setWeatherState(\"wi-day-rain-wind\");\r\n          break;\r\n        case \"Mist\": \r\n          setWeatherState(\"wi-dust\");\r\n          break;\r\n        default:\r\n          setWeatherState(\"wi-day-sunny\");\r\n          break;\r\n      }\r\n    }\r\n  }, [weathermood]);\r\n\r\n  // converting the seconds into time\r\n  let sec = sunset;\r\n  let date = new Date(sec*1000); // got msec\r\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n  return (\r\n    <>\r\n       <article className = \"widget\">\r\n        <div className = \"weatherIcon\">\r\n          <i className = {`wi ${weatherState}`}></i>\r\n        </div>\r\n        <div className = \"weatherInfo\">\r\n          <div className = \"temperature\">\r\n            <span>{temp}&deg;</span>\r\n          </div>\r\n          <div className = \"description\">\r\n            <div className = \"weatherCondition\">\r\n              {weathermood}\r\n            </div>\r\n            <div className = \"place\">{name}, {country}</div>\r\n          </div>\r\n        </div>\r\n        <div className = \"date\">{new Date().toLocaleString()}</div>\r\n        \r\n        {/* $ Column Section */}\r\n\r\n        <div className = \"extra-temp\">\r\n          <div className = \"temp-info-minmax\">\r\n            <div className = \"two-sided-section\">\r\n              <p><i className = {\"wi wi-sunset\"}></i></p>\r\n              <p className = \"extra-info-leftside\">{timeStr} <br />Sunset</p>\r\n            </div>\r\n            <div className = \"two-sided-section\">\r\n              <p><i className = {\"wi wi-humidity\"}></i></p>\r\n              <p className = \"extra-info-leftside\">{humidity} <br />Humidity</p>\r\n            </div>  \r\n          </div>\r\n\r\n          <div className = \"weather-extra-info\">\r\n            <div className = \"two-sided-section\">\r\n              <p><i className = {\"wi wi-rain\"}></i></p>\r\n              <p className = \"extra-info-leftside\">{pressure} <br />Pressure</p>\r\n            </div>\r\n            <div className = \"two-sided-section\">\r\n              <p><i className = {\"wi wi-strong-wind\"}></i></p>\r\n              <p className = \"extra-info-leftside\">{speed} <br />Speed</p>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Weathercard\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Weathercard from \"./weathercard\";\r\nimport \"./style.css\";\r\n\r\nconst Temp = () => {\r\n  const [searchValue, setSearchValue] = useState(\"Meerut\");\r\n  const [tempInfo, setTempInfo] = useState({}); \r\n\r\n  const getWeatherInfo = async () => { // when we use asyn we have to use the try-catch block\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=72aa8c5d500083ee405f7324713949f3`;\r\n\r\n      let res = await fetch(url);\r\n      let data = await res.json(); // converting data into json\r\n\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0]; // changing the name main to weathermood in parenthesis\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      const myNewWeatherInfo = { // creting the object\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n\r\n      setTempInfo(myNewWeatherInfo); // data is stored in tempInfo\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // page refresh hotein h kuch kaam ho therefore we use useEffect\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"search...\"\r\n            autoFocus\r\n            id=\"search\"\r\n            className=\"searchTerm\"\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value)} // storing the get value and storing in searchValue\r\n          />\r\n\r\n          <button\r\n            className=\"searchButton\"\r\n            type=\"button\"\r\n            onClick={getWeatherInfo}>\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* our temp card  */}\r\n      {/* Passing tempInfo as a prop to Weathercard component */}\r\n     <Weathercard tempInfo = {tempInfo}/>  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Temp;","import React from \"react\";\nimport Temp from \"./weather_app/temp\";\n\nfunction App() {\n  return (\n    <>\n      <Temp />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}